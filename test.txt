package uatSftp;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Logger;

public class SFTPFileTransfer {
    private static Logger logger = Logger.getLogger(SFTPFileTransfer.class.getName());
    private static ChannelSftp sftpChannel = null;
    private Session session = null;
    private JSch jsch = new JSch();

    private String host;
    private String user;
    private String password;
    private int port;
    private String localReplicaRoot;
    private String remoteFilePath;
    private static String mode;

    public SFTPFileTransfer() {
        try {
            Properties pr = new Properties();
            pr.load(new FileInputStream("properties/XmlReadPath.properties"));

            this.host = pr.getProperty("host");
            this.user = pr.getProperty("user");
            this.password = pr.getProperty("password");
            this.port = Integer.parseInt(pr.getProperty("port"));
            this.localReplicaRoot = pr.getProperty("localReplicaRoot");
            this.remoteFilePath = pr.getProperty("remoteFilePath");
            mode = pr.getProperty("mode");

        } catch (Exception e) {
            logger.severe("Failed to load SFTP connection properties: " + e.getMessage());
        }
    }

    private void connect() throws Exception {
        if (session == null || !session.isConnected()) {
            session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            logger.info("SFTP connection established.");
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        logger.info("SFTP connection closed.");
    }

    // Download files from SFTP server
    public void getFiles() {
        try {
            connect();

            // Loop through files and directories recursively in localReplicaRoot
            File folder = new File(localReplicaRoot);
            if (folder.exists()) {
                for (File file : folder.listFiles()) {
                    processFile(file, "get");
                }
            } else {
                logger.severe("Local folder does not exist: " + localReplicaRoot);
            }

        } catch (Exception e) {
            logger.severe("Error in getFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Upload files to SFTP server
    public void setFiles() {
        try {
            connect();

            // Loop through files and directories recursively in localReplicaRoot
            File folder = new File(localReplicaRoot);
            if (folder.exists()) {
                for (File file : folder.listFiles()) {
                    processFile(file, "set");
                }
            } else {
                logger.severe("Local folder does not exist: " + localReplicaRoot);
            }

        } catch (Exception e) {
            logger.severe("Error in setFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Recursive method to process each file and subfolder
    private void processFile(File file, String mode) {
        try {
            if (file.isDirectory()) {
                for (File subFile : file.listFiles()) {
                    processFile(subFile, mode);
                }
            } else {
                if (mode.equals("get")) {
                    downloadFile(file);
                } else if (mode.equals("set")) {
                    uploadFile(file);
                }
            }
        } catch (Exception e) {
            logger.severe("Error processing file: " + e.getMessage());
        }
    }

    // Download a file from SFTP
    private void downloadFile(File file) {
        try {
            String remoteFile = remoteFilePath + file.getName().replace("\\", "/"); // Ensure correct separator
            String localFilePath = file.getAbsolutePath();

            try (InputStream inputStream = sftpChannel.get(remoteFile);
                 FileOutputStream fos = new FileOutputStream(localFilePath)) {

                byte[] buffer = new byte[1024];
                int readCount;
                while ((readCount = inputStream.read(buffer)) > 0) {
                    fos.write(buffer, 0, readCount);
                }
                logger.info("File downloaded successfully: " + remoteFile);

            } catch (SftpException e) {
                logger.severe("Failed to get file from SFTP: " + e.getMessage());
            }
        } catch (Exception e) {
            logger.severe("Error in downloadFile: " + e.getMessage());
        }
    }

    // Upload a file to SFTP
    private void uploadFile(File file) {
        try {
            String remoteDir = remoteFilePath + file.getParent().replace("\\", "/");
            String remoteFile = remoteDir + "/" + file.getName();

            try (InputStream fis = new FileInputStream(file)) {
                try {
                    sftpChannel.cd(remoteDir);
                } catch (SftpException e) {
                    sftpChannel.mkdir(remoteDir);
                    sftpChannel.cd(remoteDir);
                }
                sftpChannel.put(fis, remoteFile);
                logger.info("File uploaded successfully: " + remoteFile);
            }
        } catch (Exception e) {
            logger.severe("Error in uploadFile: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SFTPFileTransfer sftpTool = new SFTPFileTransfer();

        if (mode.equals("get")) {
            sftpTool.getFiles(); // Download files from SFTP
        } else if (mode.equals("set")) {
            sftpTool.setFiles(); // Upload files to SFTP
        }
    }
}