import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Base64;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@WebServlet("/fetchReport")
public class FetchReportServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Log the start of the process
        APLog.reportLog("Fetching Report: " + request.getParameter("json"));

        try {
            // Parse the incoming JSON from request (assumed JSON is passed as a parameter)
            String jsonStr = request.getParameter("json");
            Map<String, Object> json = parseJson(jsonStr); // Assume parseJson parses the string into a map

            // Prepare the SQL WHERE clause
            String whereClause = " WHERE AGENCY_REF='" + (String) json.get("mnsIdentifier") 
                + "' and REPORT_DT= TO_DATE('" + (String) json.get("REPORT_DT") + "', 'DD-MM-YYYY')";

            // Create SQL statement for the specific table and fields
            CSSQLStatement aSGenSQLTool = new CSSQLStatement(4, "EXIMTRX.OPINION_REPORT_TABLE", "EXIMT");
            aSGenSQLTool.addField("REPORT_FILE", null, null);  // Base64 BLOB content field
            aSGenSQLTool.addField("C_IMG_FILE_TYPE", null, null); // File type field

            // Create and apply SQL where clause
            CSSQLClause SQLwhereClause = new CSSQLClause();
            SQLwhereClause.setClause(whereClause, null, null);
            aSGenSQLTool.setClause(SQLwhereClause);

            // Execute the query and get the result document
            Document rtnDoc = CSEEDAOHelper.commExecuteQuery(aSGenSQLTool);
            Element eroot = rtnDoc.getDocumentElement();

            // Check for system errors or failures
            String err = eroot.getAttribute("domType");
            if ((err != null) && (err.equalsIgnoreCase("sysFail"))) {
                throw new Exception(err);
            }

            err = eroot.getAttribute("errMsg");
            if ((err != null) && (err.length() > 0)) {
                throw new Exception(err);
            }

            // Fetch the record from the result document
            NodeList nl = eroot.getElementsByTagName("record");
            if (nl.getLength() == 0) {
                handleNoDataFound(response);
                return;
            }

            Node n = nl.item(0);
            String base64 = XMLManager.getChildNodeValue(n, "REPORT_FILE", true);
            String fileType = XMLManager.getChildNodeValue(n, "C_IMG_FILE_TYPE", true);

            // Check if the report data exists
            if (base64 != null && !base64.equals("") && !base64.equalsIgnoreCase("null")) {
                APLog.reportLog("Report Received Response: " + base64);
                processFileResponse(base64, fileType, response);
            } else {
                handleNoDataFound(response);
            }

        } catch (Exception e) {
            // Log and handle any errors
            APLog.reportLog(WSTools.getErrorStackTrace(e));
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "An error occurred while fetching the report.");
        }
    }

    // Function to handle and process the base64 file response
    private void processFileResponse(String base64, String fileType, HttpServletResponse response) throws IOException {
        try {
            // Decode the base64 content
            byte[] decoder = Base64.getDecoder().decode(base64);

            // Set the appropriate content type based on file type
            if ("PDF".equalsIgnoreCase(fileType)) {
                response.setContentType("application/pdf");
            } else if ("TXT".equalsIgnoreCase(fileType)) {
                response.setContentType("text/plain");
            } else if ("XLS".equalsIgnoreCase(fileType) || "XLSX".equalsIgnoreCase(fileType)) {
                response.setContentType("application/vnd.ms-excel");
            } else if ("JPG".equalsIgnoreCase(fileType) || "JPEG".equalsIgnoreCase(fileType)) {
                response.setContentType("image/jpeg");
            } else {
                response.setContentType("application/octet-stream"); // Generic binary stream for unknown types
            }

            // Set headers for file download and no caching
            response.setHeader("Pragma", "No-cache");
            response.setHeader("Cache-Control", "no-cache");
            response.setDateHeader("Expires", 2002L);

            // Write the decoded byte content to the response output stream
            OutputStream out = response.getOutputStream();
            out.write(decoder);
            out.close();
        } catch (Exception e) {
            // Log the exception and its stack trace
            APLog.reportLog(WSTools.getErrorStackTrace(e));
            e.printStackTrace();
        }
    }

    // Function to handle the case where no report data was found
    private void handleNoDataFound(HttpServletResponse response) throws IOException {
        APLog.reportLog("No Report data found in DB.");
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<div style=\"display: flex;justify-content: center;align-items: center;min-height: 100vh;font-size: xx-large;color: red;\">Report file not found...</div>");
        out.println("</body></html>");
        out.flush();
    }

    // Mock parseJson function for converting JSON string to map
    private Map<String, Object> parseJson(String jsonStr) {
        // This method should parse the jsonStr into a Map (e.g., using Gson or Jackson)
        return new HashMap<>(); // Placeholder
    }
}