package uatSftp;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Logger;

public class SFTPFileTransfer {
    private static Logger logger = Logger.getLogger(SFTPFileTransfer.class.getName());
    private static ChannelSftp sftpChannel = null;
    private Session session = null;
    private JSch jsch = new JSch();
    
    private String host;
    private String user;
    private String password;
    private int port;

    public SFTPFileTransfer() {
        try {
            Properties pr = new Properties();
            pr.load(new FileInputStream("properties/XmlReadPath.properties"));
            this.host = pr.getProperty("host");
            this.user = pr.getProperty("user");
            this.password = pr.getProperty("password");
            this.port = Integer.parseInt(pr.getProperty("port"));
        } catch (Exception e) {
            logger.severe("Failed to load SFTP connection properties: " + e.getMessage());
        }
    }

    private void connect() throws Exception {
        if (session == null || !session.isConnected()) {
            session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            logger.info("SFTP connection established.");
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        logger.info("SFTP connection closed.");
    }

    public void getFiles(String filePath) {
        try {
            connect();

            // Get file from SFTP
            String localPath = replicateLocalPath(filePath); // Replicate SFTP directory structure locally
            File localFile = new File(localPath);
            localFile.getParentFile().mkdirs(); // Create directories if needed

            try (InputStream inputStream = sftpChannel.get(filePath);
                 FileOutputStream fos = new FileOutputStream(localFile)) {
                byte[] buffer = new byte[1024];
                int readCount;
                while ((readCount = inputStream.read(buffer)) > 0) {
                    fos.write(buffer, 0, readCount);
                }
                logger.info("File downloaded successfully: " + filePath);
            }
        } catch (SftpException e) {
            logger.severe("Failed to get file from SFTP: " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in getFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    public void setFiles(String filePath) {
        try {
            connect();

            // Upload file to SFTP
            String localPath = replicateLocalPath(filePath); // Replicate local path structure
            File localFile = new File(localPath);
            logger.severe("filePath: " + filePath);
            if (!localFile.exists()) {
                logger.severe("Local file not found: " + localPath);
                return;
            }

            try (InputStream fis = new FileInputStream(localFile)) {
                String remoteDir = filePath.substring(0, filePath.lastIndexOf('/'));
                try {
                	logger.info("remoteDir is "+remoteDir);
                    sftpChannel.cd(remoteDir);
                } catch (SftpException e) {
                    // If remote directory does not exist, create it
                    sftpChannel.mkdir(remoteDir);
                    sftpChannel.cd(remoteDir);
                }
                sftpChannel.put(fis, filePath);
                logger.info("File uploaded successfully: " + filePath);
            }
        } catch (SftpException e) {
            logger.severe("Failed to set file to SFTP: " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in setFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Replicate the directory structure locally based on the given SFTP file path
    private String replicateLocalPath(String sftpFilePath) {
        String localReplicaRoot = "local-replica"; // You can change this to your local replica root path
        return localReplicaRoot + sftpFilePath;
    }

    public static void main(String[] args) {
        SFTPFileTransfer sftpTool = new SFTPFileTransfer();
        String filepath = null;
        // Example usage
        Properties pr = new Properties();
        try {
			pr.load(new FileInputStream("properties/XmlReadPath.properties"));
			filepath = pr.getProperty("path");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        sftpTool.getFiles(filepath); // Download file from SFTP
        //sftpTool.setFiles("/remote/path/to/file.xml"); // Upload file to SFTP
    }
}
