package sftpFile;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Logger;

public class SFTPFileTransfer {
    private static Logger logger = Logger.getLogger(SFTPFileTransfer.class.getName());
    private static ChannelSftp sftpChannel = null;
    private Session session = null;
    private JSch jsch = new JSch();
    
    private String host;
    private String user;
    private String password;
    private int port;
    private String localReplicaRoot;
    private String remoteFilePath;

    public SFTPFileTransfer() {
        try {
            Properties pr = new Properties();
            pr.load(new FileInputStream("XmlReadPath.properties")); // Load properties
            
            this.host = pr.getProperty("host");
            this.user = pr.getProperty("user");
            this.password = pr.getProperty("password");
            this.port = Integer.parseInt(pr.getProperty("port"));
            this.localReplicaRoot = pr.getProperty("localReplicaRoot");
            this.remoteFilePath = pr.getProperty("remoteFilePath");

        } catch (Exception e) {
            logger.severe("Failed to load SFTP connection properties: " + e.getMessage());
        }
    }

    private void connect() throws Exception {
        if (session == null || !session.isConnected()) {
            session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            logger.info("SFTP connection established.");
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        logger.info("SFTP connection closed.");
    }

    // Recursive function to download files from SFTP
    public void getFiles(String remotePath) {
        try {
            connect();
            
            // Check if the remote path is a directory or a file
            ChannelSftp.LsEntry entry = (ChannelSftp.LsEntry) sftpChannel.lstat(remotePath);
            if (entry.getAttrs().isDir()) {
                // If it's a directory, list files and recurse into subdirectories
                Vector<ChannelSftp.LsEntry> fileList = sftpChannel.ls(remotePath);
                for (ChannelSftp.LsEntry fileEntry : fileList) {
                    String fileName = fileEntry.getFilename();
                    if (!fileName.equals(".") && !fileName.equals("..")) {
                        getFiles(remotePath + "/" + fileName);
                    }
                }
            } else {
                // If it's a file, download it
                String localPath = replicateLocalPath(remotePath); // Replicate SFTP directory structure locally
                File localFile = new File(localPath);
                localFile.getParentFile().mkdirs(); // Create directories if needed

                try (InputStream inputStream = sftpChannel.get(remotePath);
                     FileOutputStream fos = new FileOutputStream(localFile)) {
                    byte[] buffer = new byte[1024];
                    int readCount;
                    while ((readCount = inputStream.read(buffer)) > 0) {
                        fos.write(buffer, 0, readCount);
                    }
                    logger.info("File downloaded successfully: " + remotePath);
                }
            }
        } catch (SftpException e) {
            logger.severe("Failed to get file from SFTP: " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in getFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Recursive function to upload files to SFTP
    public void setFiles(String localPath) {
        try {
            connect();

            File localFile = new File(localPath);
            if (localFile.isDirectory()) {
                // If it's a directory, list files and recurse into subdirectories
                File[] fileList = localFile.listFiles();
                if (fileList != null) {
                    for (File file : fileList) {
                        setFiles(file.getAbsolutePath());
                    }
                }
            } else {
                // If it's a file, upload it
                String remotePath = replicateRemotePath(localPath); // Replicate local path structure on SFTP
                String remoteDir = remotePath.substring(0, remotePath.lastIndexOf('/'));

                try {
                    sftpChannel.cd(remoteDir);
                } catch (SftpException e) {
                    // If remote directory does not exist, create it
                    sftpChannel.mkdir(remoteDir);
                    sftpChannel.cd(remoteDir);
                }

                try (InputStream fis = new FileInputStream(localFile)) {
                    sftpChannel.put(fis, remotePath);
                    logger.info("File uploaded successfully: " + localPath);
                }
            }
        } catch (SftpException e) {
            logger.severe("Failed to set file to SFTP: " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in setFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Replicate the directory structure locally based on the given SFTP file path
    private String replicateLocalPath(String sftpFilePath) {
        return localReplicaRoot + sftpFilePath; // Build local path using the localReplicaRoot from properties
    }

    // Replicate the directory structure remotely based on the given local file path
    private String replicateRemotePath(String localFilePath) {
        return remoteFilePath + localFilePath.substring(localReplicaRoot.length()); // Build remote path by appending to remoteFilePath
    }

    public static void main(String[] args) {
        SFTPFileTransfer sftpTool = new SFTPFileTransfer();
        
        // Example usage
        String remoteOrLocalPath = sftpTool.remoteFilePath; // Can be individual file or directory

        // Get files from SFTP (single file or all files in directory recursively)
        sftpTool.getFiles(remoteOrLocalPath);

        // Set files to SFTP (upload single file or all files in directory recursively)
        sftpTool.setFiles(sftpTool.localReplicaRoot);
    }
}