function convertToXML(sql) {
    const clauses = [];
    const fieldMap = parseFieldList(fieldListInput); // Assuming fieldListInput is provided

    // Define a mapping for operations if needed
    const operationMap = {
        "IN": "IN",
        "NOT IN": "NOT IN",
        "=": "=",
        "<>": "<>",
        ">": ">",
        "<": "<",
        "IS": "IS",
        "NULL": "NULL",
        "AND": " AND ",
        "OR": " OR "
    };

    // Split the SQL string into tokens based on spaces and special characters
    const tokens = sql.match(/('[^']*'|[^'\s()]+|||,)/g);
    
    tokens.forEach((token, i) => {
        token = token.trim();
        if (!token) return;

        // Check if the token is a field in the fieldMap
        if (fieldMap[token]) {
            const { DESC, DT, EEType } = fieldMap[token];
            clauses.push(`<SQL DESC="${DESC}" DT="${DT}" EEType="${EEType}" TYPE="FLD">${token}</SQL>`);
        }
        // Check if it's a SQL keyword or operation
        else if (operationMap[token]) {
            clauses.push(`<SQL TYPE="SQL">${operationMap[token]}</SQL>`);
        }
        // Handle hard-coded values or expressions (e.g., '2')
        else if (/^'.*'$/.test(token)) {
            clauses.push(`<SQL TYPE="SQL">${token}</SQL>`);
        }
        // Handle other operators and values (e.g., OPERAND, VALUE)
        else {
            if (tokens[i - 1] === "OPERAND") {
                clauses.push(`<SQL DT="val" OPTYPE="OPERATE" TYPE="OP">OP${i}</SQL>`);
            } else if (tokens[i - 1] === "VALUE") {
                clauses.push(`<SQL DT="val" OPTYPE="VALUE" TYPE="OP">${token}</SQL>`);
            } else {
                // For other cases, consider them part of the SQL
                clauses.push(`<SQL TYPE="SQL">${token}</SQL>`);
            }
        }
    });

    return `<CLAUSE>\n    ${clauses.join("\n    ")}\n</CLAUSE>`;
}

const sql = "C_MAIN_REF OPERAND 'VALUE' AND C_TRX_STATUS='M' AND CLOSE_FLG <> '2' AND EXPIRY_DT > SYS_BUSI_DATE AND LC_BAL =LC_BAL_PRSNT AND RISK_FLAG IN ('4','5') AND (REJ_FLAGFO NOT IN ('REJECTED') OR REJ_FLAGFO IS NULL) ORDER BY C_MAIN_REF";

// Example fieldListInput:
const fieldListInput = `
C_MAIN_REF,LC Number,1,
C_TRX_STATUS,TRANSACTION STATUS,1,
CLOSE_FLG,Close Flag,1,
EXPIRY_DT,Date of Expiry,91,DATE
LC_BAL,LC Outstanding Amount,3,AMT
LC_BAL_PRSNT,LC Balance for Presentation,3,AMT
RISK_FLAG,risk flag,12,
REJ_FLAGFO,REJ FLAGFO,12,Varchar_100
`;

console.log(convertToXML(sql));