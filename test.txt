<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Extract Attributes from HTML Tags</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        #result {
            margin-top: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
        .button {
            margin-top: 10px;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        .button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <h1>Extract Attributes from HTML Tags</h1>
    <input type="file" id="fileInput" multiple>
    <button class="button" id="processButton">Process Files</button>
    <div id="result"></div>

    <script>
        const files = [];

        document.getElementById('fileInput').addEventListener('change', handleFileSelect);
        document.getElementById('processButton').addEventListener('click', processFiles);

        function handleFileSelect(event) {
            const selectedFiles = event.target.files;
            files.length = 0; // Clear previously selected files
            for (const file of selectedFiles) {
                files.push(file);
            }
            console.log(`Selected files: ${files.map(f => f.name).join(', ')}`); // Debug print
        }

        function processFiles() {
            if (files.length === 0) {
                alert('No files selected.');
                return;
            }

            const filePromises = files.map(file => {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        resolve(e.target.result);
                    };
                    reader.onerror = function() {
                        reject(new Error(`Failed to read file ${file.name}`));
                    };
                    reader.readAsText(file);
                });
            });

            Promise.all(filePromises)
                .then(fileContents => {
                    const allContent = fileContents.join('\n');
                    extractAttributes(allContent);
                })
                .catch(error => {
                    console.error('Error reading files:', error);
                });
        }

        function extractAttributes(text) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '';  // Clear previous results

            // Create table
            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            // Create table header
            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `
                <th>Title</th>
                <th>ID</th>
                <th>Class</th>
            `;
            thead.appendChild(headerRow);
            table.appendChild(thead);

            // Define regex patterns for extracting attributes
            const tagPattern = /<(input|select)[^>]*>/g;
            const idPattern = /id="([^"]*)"/;
            const titlePattern = /title="([^"]*)"/;
            const classPattern = /class="([^"]*)"/;

            let match;
            while ((match = tagPattern.exec(text)) !== null) {
                const tag = match[0];
                const idMatch = idPattern.exec(tag);
                const titleMatch = titlePattern.exec(tag);
                const classMatch = classPattern.exec(tag);

                const id = idMatch ? idMatch[1] : 'N/A';
                const title = titleMatch ? titleMatch[1] : 'N/A';
                const className = classMatch ? classMatch[1] : 'N/A';

                // Create table row
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${title}</td>
                    <td>${id}</td>
                    <td>${className}</td>
                `;
                tbody.appendChild(row);
            }

            table.appendChild(tbody);
            resultDiv.appendChild(table);
        }
    </script>
</body>
</html>