<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL to XML Converter</title>
</head>
<body>
    <h1>SQL to XML Converter</h1>
    <div>
        <label for="sqlInput">Enter SQL Query:</label><br>
        <textarea id="sqlInput" rows="6" cols="80"></textarea><br><br>
        <label for="fieldListInput">Enter Field List (comma-separated: field, description, dt, eeType):</label><br>
        <textarea id="fieldListInput" rows="6" cols="80"></textarea><br><br>
        <button onclick="convertToXML()">Convert to XML</button>
    </div>
    <h2>Generated XML:</h2>
    <pre id="output"></pre>

    <script>
        function parseFieldList(fieldListInput) {
            const fieldMap = {};
            const fields = fieldListInput.split('\n');

            fields.forEach(field => {
                const parts = field.split(',');
                if (parts.length >= 4) {
                    const [name, desc, dt, eeType] = parts;
                    fieldMap[name.trim()] = {
                        DESC: desc.trim(),
                        DT: dt.trim(),
                        EEType: eeType.trim()
                    };
                }
            });
            return fieldMap;
        }

        function convertToXML() {
            const sql = document.getElementById("sqlInput").value.trim();
            const fieldListInput = document.getElementById("fieldListInput").value.trim();
            const fieldMap = parseFieldList(fieldListInput);
            const clauses = [];

            const operationMap = {
                "IN": "IN",
                "NOT IN": "NOT IN",
                "=": "=",
                "<>": "<>",
                ">": ">",
                "<": "<",
                "IS": "IS",
                "NULL": "NULL",
                "AND": "AND",
                "OR": "OR"
            };

            const tokens = sql.match(/('[^']*'|[^'\s()]+|||,)/g);
            
            tokens.forEach((token, i) => {
                token = token.trim();
                if (!token) return;

                // Check if the token is a field in the fieldMap
                if (fieldMap[token]) {
                    const { DESC, DT, EEType } = fieldMap[token];
                    clauses.push(`<SQL DESC="${DESC}" DT="${DT}" EEType="${EEType}" TYPE="FLD">${token}</SQL>`);
                }
                // Check if it's a SQL keyword or operation
                else if (operationMap[token]) {
                    clauses.push(`<SQL TYPE="SQL">${operationMap[token]}</SQL>`);
                }
                // Handle hard-coded values or expressions (e.g., '2')
                else if (/^'.*'$/.test(token)) {
                    clauses.push(`<SQL TYPE="SQL">${token}</SQL>`);
                }
                // Handle other operators and values (e.g., OPERAND, VALUE)
                else {
                    if (tokens[i - 1] === "OPERAND") {
                        clauses.push(`<SQL DT="val" OPTYPE="OPERATE" TYPE="OP">OP${i}</SQL>`);
                    } else if (tokens[i - 1] === "VALUE") {
                        clauses.push(`<SQL DT="val" OPTYPE="VALUE" TYPE="OP">${token}</SQL>`);
                    } else {
                        // For other cases, consider them part of the SQL
                        clauses.push(`<SQL TYPE="SQL">${token}</SQL>`);
                    }
                }
            });

            document.getElementById("output").textContent = `<CLAUSE>\n    ${clauses.join("\n    ")}\n</CLAUSE>`;
        }
    </script>
</body>
</html>