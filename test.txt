package uatSftp;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

public class SFTPFileTransfer {
    private static Logger logger = Logger.getLogger(SFTPFileTransfer.class.getName());
    private static ChannelSftp sftpChannel = null;
    private Session session = null;
    private JSch jsch = new JSch();

    private String host;
    private String user;
    private String password;
    private int port;
    private String localReplicaRoot;
    private String remoteFilePath;
    private static String mode;

    public SFTPFileTransfer() {
        try {
            Properties pr = new Properties();
            pr.load(new FileInputStream("properties/XmlReadPath.properties"));

            this.host = pr.getProperty("host");
            this.user = pr.getProperty("user");
            this.password = pr.getProperty("password");
            this.port = Integer.parseInt(pr.getProperty("port"));
            this.localReplicaRoot = pr.getProperty("localReplicaRoot");
            this.remoteFilePath = pr.getProperty("remoteFilePath");
            mode = pr.getProperty("mode");

        } catch (Exception e) {
            logger.severe("Failed to load SFTP connection properties: " + e.getMessage());
        }
    }

    private void connect() throws Exception {
        if (session == null || !session.isConnected()) {
            session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            logger.info("SFTP connection established.");
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        logger.info("SFTP connection closed.");
    }

    public void getFiles() {
        try {
            connect();
            List<String> filesToDownload = new ArrayList<>();
            // List files in the remote directory and its subdirectories
            listFiles(remoteFilePath, filesToDownload);

            for (String remoteFile : filesToDownload) {
                downloadFile(remoteFile);
            }
        } catch (Exception e) {
            logger.severe("Error in getFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    private void listFiles(String directory, List<String> fileList) throws SftpException {
        sftpChannel.cd(directory);
        List<ChannelSftp.LsEntry> entries = sftpChannel.ls("*");
        for (ChannelSftp.LsEntry entry : entries) {
            if (entry.getAttrs().isDir()) {
                // Recursively list files in subdirectories
                listFiles(directory + "/" + entry.getFilename(), fileList);
            } else {
                // Add file path to the list
                fileList.add(directory + "/" + entry.getFilename());
            }
        }
    }

    private void downloadFile(String remoteFilePath) {
        try {
            String localPath = replicateLocalPath(remoteFilePath);
            File localFile = new File(localPath);
            localFile.getParentFile().mkdirs(); // Create directories if needed

            try (InputStream inputStream = sftpChannel.get(remoteFilePath);
                 FileOutputStream fos = new FileOutputStream(localFile)) {
                byte[] buffer = new byte[1024];
                int readCount;
                while ((readCount = inputStream.read(buffer)) > 0) {
                    fos.write(buffer, 0, readCount);
                }
                logger.info("File downloaded successfully: " + remoteFilePath);
            }
        } catch (SftpException e) {
            logger.severe("Failed to get file from SFTP: " + remoteFilePath + " - " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in downloadFile: " + e.getMessage());
        }
    }

    public void setFiles() {
        try {
            connect();
            // Upload all files from local directory to the remote SFTP
            uploadFiles(new File(localReplicaRoot));
        } catch (Exception e) {
            logger.severe("Error in setFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    private void uploadFiles(File localDirectory) throws SftpException {
        for (File file : localDirectory.listFiles()) {
            if (file.isDirectory()) {
                // Create directory in remote if not exist
                String remoteDirPath = remoteFilePath + file.getPath().substring(localReplicaRoot.length()).replace("\\", "/");
                try {
                    sftpChannel.mkdir(remoteDirPath);
                } catch (SftpException e) {
                    // Ignore if the directory already exists
                }
                uploadFiles(file); // Recursively upload files
            } else {
                uploadFile(file);
            }
        }
    }

    private void uploadFile(File localFile) {
        try (InputStream fis = new FileInputStream(localFile)) {
            String remoteDir = remoteFilePath + localFile.getParent().substring(localReplicaRoot.length()).replace("\\", "/");
            try {
                sftpChannel.cd(remoteDir);
            } catch (SftpException e) {
                // If remote directory does not exist, create it
                sftpChannel.mkdir(remoteDir);
                sftpChannel.cd(remoteDir);
            }
            sftpChannel.put(fis, localFile.getName());
            logger.info("File uploaded successfully: " + localFile.getPath());
        } catch (SftpException e) {
            logger.severe("Failed to set file to SFTP: " + localFile.getPath() + " - " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Error in uploadFile: " + e.getMessage());
        }
    }

    // Replicate the directory structure locally based on the given SFTP file path
    private String replicateLocalPath(String sftpFilePath) {
        return localReplicaRoot + sftpFilePath.substring(remoteFilePath.length()).replace("/", "\\");
    }

    public static void main(String[] args) {
        SFTPFileTransfer sftpTool = new SFTPFileTransfer();

        // Example usage
        if (mode.equals("get")) {
            sftpTool.getFiles(); // Download files from SFTP based on the remote path from properties
        } else if (mode.equals("set")) {
            sftpTool.setFiles(); // Upload files to SFTP based on the local replica and remote path from properties
        }
    }
}