package uatSftp;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

public class SFTPFileTransfer {
    private static Logger logger = Logger.getLogger(SFTPFileTransfer.class.getName());
    private ChannelSftp sftpChannel = null;
    private Session session = null;
    private JSch jsch = new JSch();

    private String host;
    private String user;
    private String password;
    private int port;
    private String localReplicaRoot;
    private static String mode;

    public SFTPFileTransfer() {
        try {
            Properties pr = new Properties();
            pr.load(new FileInputStream("properties/XmlReadPath.properties"));

            this.host = pr.getProperty("host");
            this.user = pr.getProperty("user");
            this.password = pr.getProperty("password");
            this.port = Integer.parseInt(pr.getProperty("port"));
            this.localReplicaRoot = pr.getProperty("localReplicaRoot");
            mode = pr.getProperty("mode");

        } catch (Exception e) {
            logger.severe("Failed to load SFTP connection properties: " + e.getMessage());
        }
    }

    private void connect() throws Exception {
        if (session == null || !session.isConnected()) {
            session = jsch.getSession(user, host, port);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            logger.info("SFTP connection established.");
        }
    }

    private void disconnect() {
        if (sftpChannel != null && sftpChannel.isConnected()) {
            sftpChannel.disconnect();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        logger.info("SFTP connection closed.");
    }

    public void getFiles(List<String> remoteFilePaths) {
        try {
            connect();

            for (String remoteFilePath : remoteFilePaths) {
                // Get file from SFTP
                String localPath = replicateLocalPath(remoteFilePath);
                File localFile = new File(localPath);
                if (!localFile.getParentFile().exists() && !localFile.getParentFile().mkdirs()) {
                    logger.severe("Failed to create local directories: " + localFile.getParentFile().getPath());
                    continue;
                }

                try (InputStream inputStream = sftpChannel.get(remoteFilePath);
                     FileOutputStream fos = new FileOutputStream(localFile)) {
                    byte[] buffer = new byte[1024];
                    int readCount;
                    while ((readCount = inputStream.read(buffer)) > 0) {
                        fos.write(buffer, 0, readCount);
                    }
                    logger.info("File downloaded successfully: " + remoteFilePath);
                } catch (SftpException e) {
                    logger.severe("Failed to get file from SFTP: " + remoteFilePath + " - " + e.getMessage());
                }
            }
        } catch (Exception e) {
            logger.severe("Error in getFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    public void setFiles(List<String> localFilePaths) {
        try {
            connect();

            for (String localFilePath : localFilePaths) {
                File localFile = new File(localFilePath);
                if (!localFile.exists()) {
                    logger.severe("Local file not found: " + localFilePath);
                    continue;
                }

                String remoteFilePath = replicateRemotePath(localFilePath); // Remote path based on local file structure
                String remoteDir = remoteFilePath.substring(0, remoteFilePath.lastIndexOf('/'));

                createRemoteDirectory(remoteDir); // Create remote directory if needed

                try (InputStream fis = new FileInputStream(localFile)) {
                    sftpChannel.put(fis, remoteFilePath);
                    logger.info("File uploaded successfully: " + remoteFilePath);
                } catch (SftpException e) {
                    logger.severe("Failed to upload file to SFTP: " + localFilePath + " - " + e.getMessage());
                }
            }
        } catch (Exception e) {
            logger.severe("Error in setFiles: " + e.getMessage());
        } finally {
            disconnect();
        }
    }

    // Recursively create remote directories if they don't exist
    private void createRemoteDirectory(String remoteDir) throws SftpException {
        String[] folders = remoteDir.split("/");
        sftpChannel.cd("/");
        for (String folder : folders) {
            if (folder.length() > 0) {
                try {
                    sftpChannel.cd(folder);
                } catch (SftpException e) {
                    sftpChannel.mkdir(folder);
                    sftpChannel.cd(folder);
                }
            }
        }
    }

    // Replicate the directory structure locally based on the SFTP file path
    private String replicateLocalPath(String sftpFilePath) {
        return localReplicaRoot + sftpFilePath; // Local root + remote file path
    }

    // Replicate the directory structure on the remote server based on the local file path
    private String replicateRemotePath(String localFilePath) {
        return localFilePath.replace(localReplicaRoot, ""); // Remote file path relative to the local root
    }

    public static void main(String[] args) {
        SFTPFileTransfer sftpTool = new SFTPFileTransfer();

        // Example usage
        List<String> filePaths = new ArrayList<>();
        filePaths.add("/path/to/remote/file1.txt");
        filePaths.add("/path/to/remote/file2.txt");

        if (mode.contentEquals("get")) {
            sftpTool.getFiles(filePaths); // Download files from SFTP
        } else if (mode.contentEquals("set")) {
            sftpTool.setFiles(filePaths); // Upload files to SFTP
        }
    }
}