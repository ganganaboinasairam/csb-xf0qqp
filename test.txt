package com.cs.ceweb.servlets;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.zip.GZIPInputStream;
import com.cs.eximap.utility.Base64;

public class Base64ToPdf {
    public static void main(String[] args) throws Exception {
        // Read the Base64-encoded file into a string
        String encodedString = new String(Files.readAllBytes(Paths.get("C:\\Users\\v1013325\\Desktop\\TODAY\\output.txt")));

        // Clean up any unwanted characters and fix Base64 padding
        encodedString = encodedString.replaceAll("[^A-Za-z0-9+/=]", "");
        encodedString = fixBase64Padding(encodedString);

        // Decompress the Base64 string
        byte[] decompressedBytes = decompressByBase64(encodedString);

        // Write the decompressed bytes to a PDF file
        Files.write(Paths.get("C:\\Users\\v1013325\\Desktop\\TODAY\\Document.pdf"), decompressedBytes);

        System.out.println("PDF file created successfully.");
    }

    // Fix Base64 padding by adding '=' characters if needed
    private static String fixBase64Padding(String base64) {
        while (base64.length() % 4 != 0) {
            base64 += "=";
        }
        return base64;
    }

    // Decompress the Base64-encoded string using GZIP
    public static byte[] decompressByBase64(String str) throws Exception {
        if (str == null) return null;

        // Decode the Base64 string into a byte array
        byte[] tempByte = Base64.decode(str);

        // Decompress the byte array using GZIP
        try (ByteArrayInputStream byteStream = new ByteArrayInputStream(tempByte);
             GZIPInputStream gzipStream = new GZIPInputStream(byteStream);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int len;
            while ((len = gzipStream.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, len);
            }

            // Return the decompressed byte array
            return byteArrayOutputStream.toByteArray();
        }
    }
}